\import Algebra.Meta
\import Data.List
\import Data.Or
\import Function.Meta
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Order.StrictOrder
\import Paths
\import Paths.Meta
\import Utils (Bool, false, not, sym, true)
\open LinearOrder

-- 1. Полнота спецификации.

-- Спецификация для некоторого значения a типа A -- это просто предикат вида P : A -> \Type.
-- То есть спецификация -- это просто свойство элемента, которое мы хотим про него доказать.

-- Спецификация корректна, если верно P a.
-- Спецификация полна, если P x влечет x = a для любого x : A.

-- Например, пусть у нас есть функция, вычисляющая факториал fac : Nat -> Nat.
-- P1 -- корретная спецификация для fac, но не полная.
-- \func P1 (f : Nat -> Nat) => f 3 = 6
-- P2 -- полная, но не корректная
-- \func P2 (f : Nat -> Nat) => Empty
-- P3 -- полная и корректная спецификация для fac.
-- \func P3 (f : Nat -> Nat) => \Sigma (f 0 = 1) (\Pi (n : Nat) -> f (suc n) = suc n * f n)

-- Полная и корректная спецификация для функции сортировки:
-- \func P (f : List A -> List A) => \Pi (xs : List A) -> \Sigma (isSorted (f xs)) (isPerm (f xs) xs)
-- где isSorted xs верно тогда и только тогда, когда список xs отсортирован, а isPerm xs ys верно тогда и только список xs является перестановкой списка ys.

-- Разумеется, мы хотим, чтобы спецификация была, по крайней мере, корректной.
-- Мы можем не требовать полноты, если полную спецификацию слишком сложно проверить, и нам достаточно истинности частичной спецификации.
-- Тем не менее полезно понимать когда спецификация является полной.

-- Есть простое необходимое (и достаточное для корректных спецификаций) условие полноты, которое не зависит от элемента, для которого задается спецификация:
-- \Pi (x y : A) -> P x -> P y -> x = y
-- То есть должно существовать не более одного элемента, на котором предикат верен.

-- 2. Корректность сортировки.

\data Perm {A : \Type} (xs ys : List A) \elim xs, ys
  | nil, nil => perm-nil
  | :: x xs, :: y ys => perm-cons (x = y) (Perm xs ys)
  | :: x (:: x' xs), :: y (:: y' ys) => perm-swap (x = y') (x' = y) (xs = ys)
  | xs, ys => perm-trans {zs : List A} (Perm xs zs) (Perm zs ys)

\func perm-refl {A : \Type} {xs : List A} : Perm xs xs \elim xs
  | nil => perm-nil
  | :: a xs => perm-cons idp perm-refl

\data Sorted {A : Dec} (xs : List A) \elim xs
  | nil => sorted-nil
  | :: x xs => sorted-cons (x <= headDef x xs) (Sorted xs)
  \where {
    \lemma allSorted {A : Dec} {a1 a2 : A} (l1 l2 : List A) (s : Sorted (a1 :: l1 ++ a2 :: l2)) : a1 <= a2
      => aux a1 (a1 :: l1) l2 s
      \where
        \lemma aux {A : Dec} (a' : A) {a : A} (l1 l2 : List A) (s : Sorted (l1 ++ a :: l2)) : headDef a' (l1 ++ a :: l2) <= a \elim l1, s
          | nil, sorted-cons _ s => LinearOrder.<=-refl
          | :: a1 l1, sorted-cons a1<=h s => LinearOrder.<=-transitive a1<=h (aux a1 l1 l2 s)

    \lemma headSorted {A : Dec} {l1 l2 : List A} (s : Sorted (l1 ++ l2)) : Sorted l1 \elim l1, s
      | nil, _ => sorted-nil
      | :: a nil, sorted-cons e s => sorted-cons LinearOrder.<=-refl (headSorted s)
      | :: a (:: _ _), sorted-cons e s => sorted-cons e (headSorted s)

    \lemma tailSorted {A : Dec} (l1 l2 : List A) (s : Sorted (l1 ++ l2)) : Sorted l2 \elim l1, s
      | nil, s => s
      | :: a l1, sorted-cons _ s => tailSorted l1 l2 s
  }

\module Insertion \where {
  \func sort {A : Dec} (xs : List A) : List A
    | nil => nil
    | :: a xs => insert a (sort xs)
    \where
      \func insert {A : Dec} (a : A) (xs : List A) : List A \elim xs
        | nil => a :: nil
        | :: x xs => \case dec<_<= x a \with {
          | inl x<a => x :: insert a xs
          | inr a<=x => a :: x :: xs
        }

  \open sort

  \func sort-perm {A : Dec} (xs : List A) : Perm xs (sort xs) \elim xs
    | nil => perm-nil
    | :: a xs => perm-trans (perm-cons idp (sort-perm xs)) (inserted-perm a (sort xs))
    \where {
      \func inserted-perm {A : Dec} (a : A) (xs : List A) : Perm (a :: xs) (insert a xs) \elim xs
        | nil => perm-refl
        | :: x xs => mcases \with {
          | inl x<a => perm-trans (perm-swap idp idp idp) (perm-cons idp (inserted-perm a xs))
          | inr a<=x => perm-refl
        }

      \func insert-comm {A : Dec} (a a' : A) (l : List A)
        : insert a (insert a' l) = insert a' (insert a l)
        => \case trichotomy a a' \with {
          | less a<a' => aux a<a' l
          | equals p => rewrite p idp
          | greater a'<a => sym (aux a'<a l)
        }
        \where {
          \lemma aux {A : Dec} {a a' : A} (a<a' : a < a') (l : List A)
            : insert a (insert a' l) = insert a' (insert a l) \elim l
            | nil => mcases (idp <|> contradiction)
            | :: a1 l => repeat mcases $ idp <|> contradiction <|> pmap (a1 ::) (aux a<a' l)
        }
    }

  \func sort-sorted {A : Dec} (xs : List A) : Sorted (sort xs) \elim xs
    | nil => sorted-nil
    | :: a xs => insert-sorted a (sort-sorted xs)
    \where {
      \func insert-sorted {A : Dec} (a : A) {xs : List A} (s : Sorted xs) : Sorted (insert a xs) \elim xs
        | nil => sorted-cons LinearOrder.<=-refl sorted-nil
        | :: x xs => mcases \with {
          | inl x<a => \case s \with {
            | sorted-cons x<=xs s1 => sorted-cons (\case \elim xs, \elim x<=xs \with {
              | nil, _ => <=-less x<a
              | :: a1 l, x<=xs => mcases \with {
                | inl _ => x<=xs
                | inr _ => <=-less x<a
              }
            }) (insert-sorted a {xs} s1)
          }
          | inr a<=x => sorted-cons a<=x s
        }
    }
}

-- 3. Полнота спецификации для sort

-- Perm (sort' l) l
-- Perm (sort l) l
-- Sorted (sort' l)
-- Sorted (sort l)
-- We want to show that these 4 properties imply sort l = sort' l

-- It is enough to show the following implication:
-- Sorted l -> Sorted l' -> Perm l l' -> l = l'

-- We can show that Perm l l' <-> sort l = sort l'

-- 4. Tree sort

\module TreeSort \where {
  \data Tree (A : \Type) | leaf | branch (Tree A) A (Tree A)

  \func sort {A : Dec} (l : List A) => toList (buildTree l)

  \func buildTree {A : Dec} (l : List A) : Tree A \elim l
    | nil => leaf
    | :: a l => insert a (buildTree l)

  \func toList {A : \Type} (t : Tree A) : List A \elim t
    | leaf => nil
    | branch t1 a t2 => toList t1 ++ a :: toList t2

  \func insert {A : Dec} (a : A) (t : Tree A) : Tree A \elim t
    | leaf => branch leaf a leaf
    | branch l1 a1 l2 => \case dec<_<= a1 a \with {
      | inl a1<a => branch l1 a1 (insert a l2)
      | inr a<=a1 => branch (insert a l1) a1 l2
    }

  -- Это основное утверждение
  \lemma sort=insert {A : Dec} (l : List A)
    : sort l = Insertion.sort l \elim l
    | nil => idp
    | :: a l => rewrite (toList_insert a (buildTree l) (rewrite sort=insert (Insertion.sort-sorted l))) $ pmap (Insertion.sort.insert a) (sort=insert l)

  \lemma toList_insert {A : Dec} (a : A) (t : Tree A) (s : Sorted (toList t))
    : toList (insert a t) = Insertion.sort.insert a (toList t) \elim t
    | leaf => idp
    | branch t1 a1 t2 => mcases \with {
      | inl a1<a => pmap (toList t1 ++ a1 :: __) (toList_insert a t2 (Sorted.tailSorted (a1 :: nil) _ (Sorted.tailSorted _ _ s))) *> inv (insert_++-right a1<a s)
      | inr a<=a1 => pmap (__ ++ a1 :: toList t2) (toList_insert a t1 (Sorted.headSorted s)) *> inv (insert_++-left a<=a1 s)
    }

  \lemma insert_++-left {A : Dec} {a a1 : A} (a<=a1 : a <= a1) {l1 l2 : List A} (s : Sorted (l1 ++ a1 :: l2))
    : Insertion.sort.insert a (l1 ++ a1 :: l2) = Insertion.sort.insert a l1 ++ a1 :: l2 \elim l1, s
    | nil, _ => rewrite (dec<=_reduce a<=a1) idp
    | :: a2 l1, sorted-cons _ s => mcases \with {
      | inl a2<a => pmap (a2 ::) (insert_++-left a<=a1 s)
      | inr a<=a2 => idp
    }

  \lemma insert_++-right {A : Dec} {a a1 : A} (a1<a : a1 < a) {l1 l2 : List A} (s : Sorted (l1 ++ a1 :: l2))
    : Insertion.sort.insert a (l1 ++ a1 :: l2) = l1 ++ a1 :: Insertion.sort.insert a l2 \elim l1, s
    | nil, _ => rewrite (dec<_reduce a1<a) idp
    | :: a' l1, sorted-cons _ s1 \as s2 => rewrite (dec<_reduce (<-transitive-right (Sorted.allSorted l1 l2 s2) a1<a)) (pmap (a' ::) (insert_++-right a1<a s1))
}

-- 5. Red-black tree sort

\module RedBlack \where {
  \func sort {A : Dec} (l : List A) => toList (buildTree l)
    \where {
      \data Color | red | black

      \data RBTree (A : \Type) | rbLeaf | rbBranch Color (RBTree A) A (RBTree A)

      \func buildTree {A : Dec} (l : List A) : RBTree A \elim l
        | nil => rbLeaf
        | :: a l => repaint (insert a (buildTree l))

      \func repaint {A : \Type} (t : RBTree A) : RBTree A
        | rbBranch _ l a r => rbBranch black l a r
        | leaf => leaf

      \func insert {A : Dec} (a : A) (t : RBTree A) : RBTree A \elim t
        | rbLeaf => rbBranch red rbLeaf a rbLeaf
        | rbBranch c l1 a1 l2 => \case dec<_<= a1 a \with {
          | inl a1<a => balanceRight c l1 a1 (insert a l2)
          | inr a<=a1 => balanceLeft c (insert a l1) a1 l2
        }

      {-
            -- or x true => not x
            \func or (b1 b2 : Bool) : Bool
              | true, _ => true
              | x, true => not x
              | false, false => false
      -}

      -- balanceLeft black (rbBranch red a x (rbBranch red b y c)) /=> rbBranch red (rbBranch black a x b) y (rbBranch black c v r)
      \func balanceLeft {A : \Type} (c : Color) (\strict l : RBTree A) (v : A) (r : RBTree A) : RBTree A \elim c, l
        | black, rbBranch red (rbBranch red a x b) y c => rbBranch red (rbBranch black a x b) y (rbBranch black c v r)
        | black, rbBranch red a x (rbBranch red b y c) => rbBranch red (rbBranch black a x b) y (rbBranch black c v r)
        | c, a => rbBranch c a v r

      \func balanceRight {A : \Type} (c : Color) (l : RBTree A) (v : A) (\strict r : RBTree A) : RBTree A \elim c, r
        | black, rbBranch red (rbBranch red b y c) z d => rbBranch red (rbBranch black l v b) y (rbBranch black c z d)
        | black, rbBranch red b y (rbBranch red c z d) => rbBranch red (rbBranch black l v b) y (rbBranch black c z d)
        | c, b => rbBranch c l v b
    }

  \open sort

  \func toList {A : \Type} (t : RBTree A) : List A \elim t
    | rbLeaf => nil
    | rbBranch _ t1 a t2 => toList t1 ++ a :: toList t2

  -- Это основное утверждение
  \lemma sort=insert {A : Dec} (l : List A)
    : sort l = Insertion.sort l \elim l
    | nil => idp
    | :: a l =>
      rewrite (toList_repaint, toList_insert a (buildTree l) (rewrite sort=insert (Insertion.sort-sorted l))) $
      pmap (Insertion.sort.insert a) (sort=insert l)

  -- Для доказательства sort=insert нам понадобятся леммы toList_repatint и toList_insert
  \lemma toList_repaint {A : \Set} (t : RBTree A) : toList (repaint t) = toList t \elim t
    | rbLeaf => idp
    | rbBranch _ t1 a t2 => idp

  \lemma toList_insert {A : Dec} (a : A) (t : RBTree A) (s : Sorted (toList t))
    : toList (insert a t) = Insertion.sort.insert a (toList t) \elim t
    | rbLeaf => idp
    | rbBranch c t1 a1 t2 => mcases \with {
      | inl a1<a => rewrite toList_balanceRight (pmap (toList t1 ++ a1 :: __) (toList_insert a t2 (Sorted.tailSorted (a1 :: nil) _ (Sorted.tailSorted _ _ s))) *> inv (TreeSort.insert_++-right a1<a s))
      | inr a<=a1 => rewrite toList_balanceLeft (pmap (__ ++ a1 :: toList t2) (toList_insert a t1 (Sorted.headSorted s)) *> inv (TreeSort.insert_++-left a<=a1 s))
    }

  -- Эти две леммы -- это основное свойство функций балансировки
  \lemma toList_balanceLeft {A : \Set} {c : Color} {l : RBTree A} {v : A} {r : RBTree A}
    : toList (balanceLeft c l v r) = toList (rbBranch c l v r)
    => mcases {balanceLeft} equation

  \lemma toList_balanceRight {A : \Set} {c : Color} {l : RBTree A} {v : A} {r : RBTree A}
    : toList (balanceRight c l v r) = toList (rbBranch c l v r)
    => mcases {balanceRight} equation
}

\func not-isInv (b : Bool) : not (not b) = b
  => mcases {not,2} \with {
    | true => idp
    | false => idp
  }

-- 6. Tail recursive red-black tree sort

\module TRRedBlack \where {
  \open RedBlack.sort
  \open RedBlack(toList)

  \func sort {A : Dec} (l : List A) => rbTreeToList (buildTree l) nil
    \where
      \func rbTreeToList {A : \Type} (t : RBTree A) (r : List A) : List A \elim t
        | rbLeaf => r
        | rbBranch _ t1 a t2 => rbTreeToList t1 (a :: rbTreeToList t2 r)

  \open sort

  \lemma rbTreeToList=toList {A : \Set} (t : RBTree A) : rbTreeToList t nil = toList t
    => aux t nil *> ++_nil
    \where
      \lemma aux {A : \Set} (t : RBTree A) (l : List A) : rbTreeToList t l = toList t ++ l \elim t
        | rbLeaf => idp
        | rbBranch c t1 a t2 => aux t1 (a :: rbTreeToList t2 l) *> pmap (toList t1 ++ a :: __) (aux t2 l) *> inv ++-assoc

  \lemma sort=rbSort {A : Dec} (l : List A) : sort l = RedBlack.sort l
    => rbTreeToList=toList _
}