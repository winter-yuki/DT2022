\import Utils
\open Nat

-- 1. Рекурсивное определение vec, head, tail.

\func vec (A : \Type) (n : Nat) : \Type \elim n
  | 0 => \Sigma
  | suc n => \Sigma A (vec A n)

\func head {A : \Type} (n : Nat) (xs : vec A (suc n))
  => xs.1

\func tail {A : \Type} (n : Nat) (xs : vec A (suc n))
  => xs.2

-- 2. Индуктивное определиние Vec, head, tail, append, length.

\data Vec (A : \Type) (n : Nat) \elim n
  | 0 => nil
  | suc n => cons A (Vec A n)

{-
\data Vec (A : \Type) : Nat -> \Type
  | nil : Vec A 0
  | cons {n : Nat} : A -> Vec A n -> Vec A (suc n)

\data \infix 1 = {A : \Type} (a : A) : A -> \Type
  | idp : a = a

\data D (A : \Type) : Nat -> \Type
  | nil : D A 0
  | cons {n : Nat} : A -> D A (n + n)

\func foo {A : \Type} {n : Nat} (d : D A (n * n)) \elim d
  | nil => ...
  | cons {k} a => ...

\func bar {A : \Type} {k : Nat} (d : D A k)
  | {A}, .{0}, nil => ...
  | {A}, .{n + n}, cons {n} a => ...

\data D' (A : \Type) (k : Nat)
  | nil (k = 0)
  | cons {n : Nat} (k = n + n) A

-}

-- Конструкторы принимают параметры типа данных в качестве неявных аргументов.
\func emptyList => nil {Nat}

\func Head {A : \Type} {n : Nat} (xs : Vec A (suc n)) : A \elim xs
  | cons a xs => a

\func Tail {A : \Type} {n : Nat} (xs : Vec A (suc n)) : Vec A n \elim xs
  | cons a xs => xs

\func first {A : \Type} {n : Nat} (xs : Vec A n) : Maybe A \elim n, xs
  | 0, nil => nothing
  | suc n, cons a xs => just a

\func \infixl 4 v++ {A : \Type} {n m : Nat} (xs : Vec A n) (ys : Vec A m) : Vec A (n + m) \elim n, xs
  | 0, nil => ys
  | suc n, cons x xs => cons x (xs v++ ys)

-- Очень полезная функция.
\func Vec-length {A : \Type} {n : Nat} (xs : Vec A n) => n

-- 3. Fin, toNat, lookup.

-- Тип n-элементных множеств можно определить различными способами.
-- Например, мы можем определить его как подтип натуральных чисел:
-- \func fin (n : Nat) => \Sigma (x : Nat) (x < n)

\func Fin' (n : Nat) : \Set0
  | 0 => Empty
  | suc n => Maybe (Fin' n)

-- Еще его можно определить индуктивно:
\data Fin (n : Nat) \with
  | suc n => {
    | fzero
    | fsuc (Fin n)
  }

{-
\data Fin (n : Nat) \with
  | suc n => fzero
  | suc n => fsuc (Fin n)
-}

-- Fin 0 -- пустой тип.
\func Fin-absurd {A : \Type} (x : Fin 0) : A

\func fin0 : Fin 3 => fzero
\func fin1 : Fin 3 => fsuc fzero
\func fin2 : Fin 3 => fsuc (fsuc fzero)
-- \func fin3 : Fin 3 => fsuc (fsuc (fsuc fzero))

-- Fin 3 has at least 3 elements.
--

-- В Fin 3 не более 3 элементов.
\func atMost3 (x : Fin 3) : Either (x = fin0) (Either (x = fin1) (x = fin2))
  | fzero => inl idp
  | fsuc fzero => inr (inl idp)
  | fsuc (fsuc fzero) => inr (inr idp)
  | fsuc (fsuc (fsuc ()))

\func toNat {n : Nat} (x : Fin n) : Nat \elim n, x
  | suc n, fzero => 0
  | suc n, fsuc x => suc (toNat x)

-- Безопасный lookup.
\func lookup {A : \Type} {n : Nat} (xs : Vec A n) (i : Fin n) : A \elim n, xs, i
  | suc n, cons a xs, fzero => a
  | suc n, cons a xs, fsuc i => lookup xs i

-- 4. Data types may use non-structural recursion.

\data Vec' (A : \Type) (n : Nat) \elim n
  | 0 => nil'
  | suc n => cons' A (Vec' A (suc n))

\func Vec'-unique {A : \Type} {n : Nat} (xs : Vec' A (suc n)) : Empty \elim xs
  | cons' a xs => Vec'-unique xs

-- 5. Элиминаторы.

{-
\func h (b : Bool) : P b
  | true => t
  | false => f

\func h' => Bool-elim P t f
 -}

-- Элиминатор для Bool (рекурсор для Bool -- это просто if).
\func Bool-elim (P : Bool -> \Type)
                (t : P true)
                (f : P false)
                (x : Bool) : P x \elim x
  | true => t
  | false => f

\func Bool-rec (P : \Type)
               (t : P)
               (f : P)
               (x : Bool) : P \elim x
  | true => t
  | false => f

{-
\func h (n : Nat) : P n
  | zero => z
  | suc n => s n (h n)

\func h' => Bool-elim P t f
 -}

-- Элиминатор для Nat
\func Nat-elim (P : Nat -> \Type)
               (z : P zero)
               (s : \Pi (n : Nat) -> P n -> P (suc n))
               (x : Nat) : P x \elim x
  | 0 => z
  | suc n => s n (Nat-elim P z s n)

-- Рекурсор для Nat
\func Nat-rec (P : \Type)
              (z : P)
              (s : Nat -> P -> P)
              (x : Nat) : P \elim x
  | 0 => z
  | suc n => s n (Nat-rec P z s n)

-- 5. Оператор J.

-- Оператор J является обобщением transport.
-- Если transport -- это независимый элиминатор, то J -- его зависимая версия.

-- Можно сравнить с элиминаторами для Nat.
{-
-- Независимая версия:
\func Nat-rec (B : \Type)
    (z : B)
    (s : Nat -> B -> B)
    (n : Nat)
    : B

-- Зависимая версия:
\func Nat-elim (B : Nat -> \Type)
    (z : B 0)
    (s : \Pi (k : Nat) -> B k -> B (suc k))
    (n : Nat)
    : B n
-}

-- Независимая версия:
\func transport''''
  {A : \Type}
  {a a' : A}
  (B : A -> \Type)
  (b : B a)
  (p : a = a')
  : B a' \elim p
  | idp => b

-- Зависимая версия:
\func J
  {A : \Type} {a : A}
  (B : \Pi (a' : A) -> a = a' -> \Type)
  (b : B a idp)
  {a' : A} (p : a = a')
  : B a' p \elim p
  | idp => b

-- Напоминание как выглядит элиминатор для Unit.
\data Unit | unit

\func Unit-elim
  (B : Unit -> \Type)
  (b : B unit)
  (p : Unit)
  : B p
  \elim p
  | unit => b

\func Unit-singleton (x : Unit) : x = unit
  => Unit-elim (\lam x => x = unit) idp x

-- Если переписать тип B в некаррированом виде, то получится следующая версия того же оператора:
-- Этот элиминатор в точности является элиминатором для Unit.
-- Таким образом, J говорит, что в типе \Sigma (a' : A) (a = a') ровно один элемент.
\func J'
  {A : \Type} {a : A}
  (B : (\Sigma (a' : A) (a = a')) -> \Type)
  (b : B (a, idp))
  (p : \Sigma (a' : A) (a = a'))
  : B p
  => J (\lam a' p => B (a',p)) b p.2

-- Это утверждение не типизируется.
-- \func =-unique' {A : \Type} {a a' : A} (p : a = a') : p = idp => {?}

-- Это утверждение типизируется, но не верно, т.е. в типе a = a может быть больше одного элемента.
-- \func =-unique {A : \Type} {a : A} (p : a = a) : p = idp => {?}

-- J говорит, что для определения функции над a = a' достаточно определить ее для idp.
-- При этом a' должен варьироваться вместе с a'.
-- Если мы определим версию J, в которой a' всегда равно a, то мы получим оператор K:
{-
\func K {A : \Type} {a : A} (B : a = a -> \Type)
    (b : B idp)
    (p : a = a) : B p => {?}
-}
-- Этот оператор эквивалентен =-unique.
-- Следовательно его невозможно доказать.
-- Его можно добавить как аксиому, но мы не будем этого делать.
-- Мы будем обсуждать его подробнее позже.

-- 7. Matching with idp

\func sym {A : \Type} {a a' : A} (p : a = a') : a' = a \elim p
  | idp => idp

\func trans {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a'' \elim q
  | idp => p

\func foo {n : Nat} (p : 0 = n) : n = 0 \elim p
  | idp => idp

{-
\func bar {n : Nat} (p : n = n) : p = idp \elim p
  | idp => idp
-}

-- 8. Ассоциативность ++ для векторов.

\func +-assoc (n m k : Nat) : (n + m) + k = n + (m + k) \elim k
  | 0 => idp
  | suc k => pmap suc (+-assoc n m k)

\func baz => \Sigma (x : Nat) (x = x)

-- Ассоциативность для v++ даже сформулировать сложно, так как у (xs v++ ys) v++ zs и xs v++ (ys v++ zs) разные типы: Vec A (k + (m + n)) и Vec A ((k + m) + n).
-- Это можно поправить при помощи transport, так как он позволяет любой элемент Vec A x превратить в элемент Vec A y, если x и y равны.
\func v++-assoc {A : \Type} {n m k : Nat}
                (xs : Vec A n) (ys : Vec A m) (zs : Vec A k)
  : transport (Vec A) (+-assoc n m k) ((xs v++ ys) v++ zs) = xs v++ (ys v++ zs)
  \elim n, xs
  | 0, nil => {?}
  | suc n, cons a xs => {?}
