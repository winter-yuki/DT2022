\import Function.Meta
\import Logic.Meta
\import Meta
\import Paths.Meta
\import lect07 \hiding (<=-refl, baz, isEven)
\import lect10
\import Utils

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций
\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f)
  => unfold isInj \lam eq => \let | i => q eq | j => p i \in j

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f
  => unfold isInj \lam eq => p $ unfold o $ rewrite eq idp

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.

\func isMultipleOf3Or5 (n : Nat) : \Type
  | 0 => \Sigma
  | 1 => Empty
  | 2 => Empty
  | 3 => \Sigma
  | 4 => Empty
  | 5 => \Sigma
  | suc (suc (suc (suc (suc n)))) => {?}

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) => \lam x y => {?}

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => {?}

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A)
  => (
    \lam (a, p) => (\lam x y => \let px => p x | py => p y \in sym px *> py, a)
  ,
    \lam (p, a) => unfold isTriv (a, \lam a' => p a a')
     )

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Either A B)) : Empty
  => \have | q1 => p Unit-isProp Unit-isProp
           | q2 => q1 (Either.inl ()) (Either.inr ())
    \in \case q2

-- 5. Докажите, что LessOrEq является предикатом.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) => ext n m
  \where {
    \func ext (n m : Nat) (p1 : LessOrEq n m) (p2 : LessOrEq n m) : p1 = p2
      | 0, m, z<=n, z<=n => idp
      | suc n, suc m, s<=s p1, s<=s p2 => pmap s<=s $ ext n m p1 p2
  }

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func Nat-isSet : isSet Nat => helper
  \where {
    \func helper (n : Nat) (m : Nat) (p1 : n = m) (p2 : n = m) : p1 = p2
      | 0, 0, p1, p2 => ext
      | suc n, suc m, p1, p2 => ext
  }

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => T (x < y)) n m) => helper n m
  \where {
    \func helper (n m : Nat)
              (r1 : ReflClosure (\lam x y => T (x < y)) n m)
              (r2 : ReflClosure (\lam x y => T (x < y)) n m)
      : r1 = r2
      | 0, 0, refl p, refl p1 => pmap refl (Nat-isSet 0 0 p p1)
      | 0, 0, refl p, inc ()
      | 0, 0, inc (), _
      | 0, suc m, refl p, refl p1 => \case p
      | 0, suc m, refl p, inc r => \case p
      | 0, suc m, inc r, refl p => \case p
      | 0, suc m, inc r, inc r1 => pmap inc (\lam i => ())
      | suc n, 0, refl p, refl p1 => \case p
      | suc n, 0, refl p, inc r => \case p
      | suc n, suc m, r1, r2 => \case \elim r1, \elim r2 \with {
        | refl p, refl p1 => pmap refl (Nat-isSet _ _ p p1)
        | refl p, inc r => \let q => pmap pred p \in rewriteF q at r $ \case m<m r
        | inc r, refl p => \let q => pmap pred p \in rewriteF q at r $ \case m<m r
        | inc r, inc r1 => pmap inc T-lem
      }
      | suc n, 0, inc r, r2 => \case r

    \func m<m {m : Nat} (p : T (m < m)) : Empty
      | {suc m}, p => m<m {m} p
  }

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty
  => \case p 0 0 (refl idp) (inc z<=n) \with {
    | p1 => contradiction
  }

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A
  => \lam x y => p $ q (f x) (f y)

-- 8. Докажите, что тип с разрешимым равенством являетя множеством.

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A
  => \lam a a' => retract-isProp {a = a'} {Decide (a = a')}
--      {\Pi (x y : A) -> Decide (x = y)}
--      (forall-isProp _ \lam x => forall-isProp {A} (\lam y => Decide (x = y)) \lam y => {?})
      (\lam x y => \case dec x y \with {
        | yes a1 => {?}
        | no n => {?}
      })
      {?}
      {?}
      {?}
--    \lam a a' => \lam a=a'1 a=a'2 => \case dec a a' \as b \with {
--    | yes eq => {?}
--    | no n => absurd $ n a=a'1
--  }

-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B)
  => \lam or1 or2 => retract-isProp {or1 = or2} {Bool -> \Sigma A B}
      (forall-isProp _ \lam b => Sigma-isProp {?} {?}) {?} {?} {?}
--    \lam or1 or2 => \lam or1=or2 or1=or2' => \case or1, or2 \with {
--    | inl a, inl a1 => {?}
--    | inl a, inr b => {?}
--    | inr b, inl a => {?}
--    | inr b, inr b1 => {?}
--  }

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x) => {?}

-- 11. Докажите, что если A является множеством, то List A также им является.

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A)
  => {?}

-- Optional:
-- 12. Докажите, что n-типы замкнуты относительно образования \Pi-типов.
--     Hint: Доказательство по индукции. Для случая suc n нужно доказать, что если f,g : \Pi (x : A) -> B x, то f = g эквивалентно \Pi (x : A) -> f x = g x.

\func levelPi {A : \Type} (B : A -> \Type) (n : Nat) (p : \Pi (x : A) -> B x `hasLevel` n) : (\Pi (x : A) -> B x) `hasLevel` n => {?}